@using LudumDare54.Core.Scenes;
@using LudumDare54.Graphics.Pages.Editors.Anchors
@using LudumDare54.Graphics.Pages.Editors.Shared
@using LudumDare54.Graphics.Pages.Editors.Tags
<header>
    <button class="return" @onclick="args=>Manager.Swap(Model, new ImagesPanelData())"><span>Return</span></button>
    <h2>Image</h2>
    <button class="close" @onclick="args=>Manager.Remove(Model)"><span>Close</span></button>
</header>

<form @onsubmit:preventDefault class="main">
    <label>
        <span class="label">Name</span>
        <input type="text" @bind="UniqueId" maxlength="128" />
    </label>

    <label class="origin">
        <span class="label">Origin</span>
        <input type="number" min="-5" max="5" step="0.01" @bind="Model.Image.OriginX" />
        <input type="number" min="-5" max="5" step="0.01" @bind="Model.Image.OriginY" />
    </label>

    <label class="origin">
        <span class="label">Weight</span>
        <input type="number" min="0" max="999" step="0.1" @bind="Model.Image.Weight" />
    </label>

    <div class="preview">
        <div class="inner" id="@_innerGuid">
            <img src="@Model.Image.File" style="@($"left: {Model.Image.OriginX}%; top: {Model.Image.OriginY}%; transform: translate(-{Model.Image.OriginX}%, -{Model.Image.OriginY}%)")" />
            @foreach (var anchor in Model.Image.Anchors) {
                @RenderAnchor(anchor)
            }
        </div>
    </div>
    <button type="button" @onclick="args=>_=true">Renew</button>

    <div class="tags">
        <label>
            <span class="label">Tags</span>
        </label>
        <TagsComponent Tags="Model.Image.Tags" />
    </div>

    <div class="anchors">
        <label>
            <span class="label">Anchors</span>
        </label>
        <AnchorsComponent Anchors="Model.Image.Anchors" />
    </div>

    <div>
        <button class="delete" type="button" @onclick="Delete"><span>Delete</span></button>
    </div>
</form>

@code {
    public String UniqueId {
        get => Model.Image.File;
        set {
            if (_repository.EventCards.Any(p => p.Id.Equals(value, StringComparison.OrdinalIgnoreCase))) {
                return;
            }

            Model.Image.File = value;
        }
    }


    public RenderFragment RenderAnchor(Anchor anchor, Single offsetX = 0, Single offsetY = 0) {
        Image? visual = null;
        if (anchor is StaticSelectingAnchor staticSelectingAnchor) {
            var query = _repository.Images.Where(p => staticSelectingAnchor.Tags.All(t => p.Tags.Any(x => x.Key.Equals(t.Key, StringComparison.OrdinalIgnoreCase))));
            visual = query.Skip(_random.Next(query.Count())).FirstOrDefault();
        }
        if (visual is null || _random.Next(100) > anchor.Chance) {
            return @<text></text>;
        }
        return @<text>
        <img style="@($"left: {anchor.PositionX}%; top: {anchor.PositionY}%; transform-origin: {visual.OriginX}% {visual.OriginY}%; transform: translate(-{visual.OriginX + offsetX}%, -{visual.OriginY + offsetY}%) scale({anchor.Scale / 100})")" src="@visual.File" />
        @foreach (var subAnchor in visual.Anchors) {
            @RenderAnchor(subAnchor)
        }
    </text>;
    }
}