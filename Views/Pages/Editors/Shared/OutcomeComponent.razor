@using LudumDare54.Core.Conditions;
@using LudumDare54.Core.Tags;
@using LudumDare54.Core;
@using LudumDare54.Graphics.Pages.Editors.Conditions
@using LudumDare54.Graphics.Pages.Editors.Modifiers

<label>
    <span class="label">@nameof(Outcome.Id)</span>
    <input type="text" @bind="Outcome.Id" />
</label>

<label>
    <span class="label">@nameof(Outcome.Weight)</span>
    <input type="number" @bind="Outcome.Weight" step="0.1" min="0" max="9999" />
</label>

<label>
    <span class="label">@nameof(Outcome.Success)</span>
    <input type="checkbox" checked="@Outcome.Success" @onchange="args=>Outcome.Success=!Outcome.Success" />
</label>

<label>
    <span class="label">@nameof(Outcome.End)</span>
    <input type="checkbox" checked="@Outcome.End" @onchange="args=>Outcome.End=!Outcome.End" />
</label>

<label>
    <span class="label">Conditions</span>
</label>
<ConditionsComponent Conditions="Outcome.Conditions" />

<label>
    <span class="label">Modifiers</span>
</label>
<ModifiersComponent Modifiers="Outcome.Modifiers" />

<label>
    <span class="label main">Next [Optional]</span>
</label>
<ul class="next">
    @foreach (var next in Outcome.Next) {
        <li>
            <label>
                <span class="label">@next.EventCardId</span>
                <input type="number" @bind="@next.Weight" min="0" max="9999" step="0.1" />
            </label>
            <button type="button" @onclick="args=>Outcome.Next.Remove(next)" class="delete">Remove</button>
        </li>
    }
    <li>
        <input type="text" list="AllEventCards" @bind="_linkCardId" />
        <button @onclick="Add">Add</button>
    </li>
</ul>

@code {
    [Parameter]
    public required Outcome Outcome { get; set; }

    [Inject]
    public required RepositoryFactory RepositoryFactory { get; set; }

    private Repository _repository = default!;

    protected override async Task OnParametersSetAsync() {
        _repository = await RepositoryFactory.GetRepository();
    }

    public String? _linkCardId;

    public void Add() {
        if (!String.IsNullOrWhiteSpace(_linkCardId) 
        && _repository.EventCards.Any(p => p.Id == _linkCardId)) {
            Outcome.Next.Add(new(_linkCardId, 1));
        }
    }
}
